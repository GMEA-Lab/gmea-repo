# lowered_probe_adjustment -- julek.chawarski@mi.mun.ca 05.14.2020

## This script was written to adjust acoustic measurement values on a lowered probe with horizontal faced transducers
## Here, we join three sensor types: WBAT (Simrad EK80) sv.csv files, Seabird CTD .odf files, and a custom irradiance sensor from IMR .csv

library(ggplot2)
library(dplyr)
library(oce)      # reading CTD files
library(lubridate) # used for time conversion fxns
library(imputeTS) # used for na_interpolation fxn
library(gmodels) # used for ci fxn
library(pals)   # used for excelled ocean.haline() color palette
library(imager)  # used for imwarp fxn

## CTD wrangling -- this section is specific of ODF ctd files
## Each CTD file may be different. In this case the TIMS is the number of seconds elapsed. 
## It needs to be converted into a type that includes date, to align acoustic probe data.
## The final time used is a matlab format(?) The number of seconds since Jan 1, 1970... 

CTD <- read.ctd.odf("CTD_2019001_069_1_UP.odf")              # read a single CTD files that coincides with WBAT profile
CTD.data <- data.frame(CTD[["data"]])                          # select just the data portion

start_time <- CTD[["metadata"]]$startTime                         # collect the start time of the cast
start_time_s <- period_to_seconds(lubridate::seconds(start_time))  # convert start time to seconds (timeY)
CTD.data$Time <- CTD.data$TIMS + start_time_s                       # add seconds to start time

## Absorption coefficient profile correction

wbat <- read.csv("ISECOLD2019_1_2000_38kHz.sv.csv", header=F)
wbat.meta <- wbat[2:dim(wbat)[1],1:13]      # select the metadata portion 
colnames(wbat.meta) <- wbat[1,1:13]         # assign the headers to the metadata
colnames(wbat.meta)[1] <- "Ping_index"      # rename the corrupt header name

# convert the probe time to the same format as the CTD
wbat.meta$datetime <- as.POSIXct(paste(wbat.meta$` Ping_date`, wbat.meta$` Ping_time` ), format="%Y-%m-%d %H:%M:%S", tz="UTC")
wbat.meta$Time <- period_to_seconds(lubridate::seconds(wbat.meta$datetime)) + as.numeric(wbat.meta$` Ping_milliseconds`)*10^-3
wbat.meta$Time <- as.character(round(wbat.meta$Time/0.5)*0.5) # round to nearest 0.5 seconds and convert to character for joining
CTD.data$Time <- as.character(round(CTD.data$Time/0.5)*0.5)

# introduce irradiance data
light <- read.csv("Integrator_measurements.csv")
light$Time <- period_to_seconds(seconds(as.POSIXct(light$iDate, tz="UTC")))
light$Time <- as.character(round(light$Time/0.5)*0.5)

# bind the irradiance data to the CTD data
CTD.data <- light %>%
            dplyr::select(Time, Ham) %>%           # select only the time and HAM measurement
              right_join(.,CTD.data, by="Time")
                            
drop_cols <- c(" Distance_gps", " Distance_vl", " Distance_vl", " Latitude", " Longitude", " Depth_start", " Depth_stop", " Ping_date", " Ping_time")

wbat.ctd <- wbat.meta %>% 
          left_join(., CTD.data, by="Time") %>%     # join ctd and wbat data.frames by matching time cases
            dplyr::select(., -c(drop_cols)) %>%      # drop extraneous headers
            mutate_all(., as.numeric) %>%           # convert all values to numeric
            group_by(Ping_index) %>%                # there are multiple values per ping so they need to be average to wbat sampling resolution
              summarise_all(., mean) %>%               # calculate mean value for each parameter per ping
                na_interpolation(.)

sal <- wbat.ctd$salinity
temp <- wbat.ctd$temperature
p <- wbat.ctd$pressure

require(oce)
c_new <- swSoundSpeed(salinity = sal,temperature = temp, pressure = p) # new sound speed based on CTD profile 

# set constant variables from orginial calibration file -- These are all dependent on transducer type and default data colllection settings
c <-1482.41             # original sound speed
coeff_abs <- 0.0115     # original coefficient of absorption
t <-1.022*10^-5         # PulseCompressedEffectivePulseLength (sec)
y <- -21                # two-way beam angle  --- Adjust based on transducer (NOTE: only 38 kHz has sucha wide beam angle)

  f_nominal <-38000 #nominal frequency    -- Adjust based on transducer
        
f <- 40500 #center frequency
equi_beam_angle <-10^((y+20*log(f_nominal/f))/10)          # calculate equivalent beam angle
coeff_abs_new <-swSoundAbsorption(frequency= f_nominal,    # new absorption coefficient
                                  salinity = sal,
                                  temperature = temp,
                                  pressure = p, 
                                  pH =8,
                                  formulation = "francois-garrison") 

wbat.sv <- wbat[2:dim(wbat)[1], 14:dim(wbat)[2]]  # selects only the Sv matrix from the exported file

# Set variables for range matrix calculation
Range_start <- as.numeric(wbat.meta$` Range_start`)[1] # all values in the df are the same.
Range_stop <- as.numeric(wbat.meta$` Range_stop`)[1]
Sample_count <- as.numeric(wbat.meta$` Sample_count`)[1]

# calculate range for each horizontal sample
wbat.range <- sapply(1:dim(wbat.sv)[1], function(i) Range_start + ((Range_stop-Range_start)/Sample_count)*(i+0.5))    

wbat.range <- matrix(wbat.range, nrow=dim(wbat.sv)[2], ncol = dim(wbat.sv)[1], byrow=T) # creates the full range matrix

# calculate time matrix
time.mat <- apply(wbat.range,1:2, function(i)(c*t/4+i)*2/c) #time for the signal to return 

# calculate a new range matrix
wbat.range_new <- apply(time.mat, 2, function(i) i*c_new/2-c_new*t/4)   #new range matrix

# calculate power matrix
power<- wbat.sv-20*log10(wbat.range)-2*(coeff_abs)*(wbat.range)+10*log10(c*t*equi_beam_angle/2) 

## Calculate exact Sv for each sample using the equation Sv = Power + 20logR * alpha * R_new - 10log10(c*tau*psi/2)
Sv_new <- power+20*log10(wbat.range_new)+2*coeff_abs_new*wbat.range_new  # -10*log10(c_new*t*equi_beam_angle/2) 
x <- 10*log10(c_new*t*equi_beam_angle/2)  # 10log10(c*tau*psi/2) is a vector - subtraction of vector from matrices requires special formulas  
Sv_new <- apply(Sv_new, 2, function(i) i-x) # subtract the final term from the rest of the calculation

## Complete the dataframes 

#replace -999 values with NA
wbat.sv[wbat.sv < -990] <- NA
Sv_new[Sv_new < -990] <- NA

require(gmodels)
# calculate confidence intervals
Sv_new_ci <- t(as.data.frame(apply(Sv_new, 1, function(i) gmodels::ci(i, na.rm=T))))
colnames(Sv_new_ci) <- c("Estimate_new", "lowCI_new", "highCI_new", "stderr_new")

Sv_old_ci <- t(data.frame(apply(wbat.sv, 1, function(i) gmodels::ci(i, na.rm=T))))
colnames(Sv_old_ci) <- c("Estimate_old", "lowCI_old", "highCI_old", "stderr_old")

# bind the mean and 95% condfidence intervals with the CTD data
wbat.ctd <- cbind(wbat.ctd, Sv_old_ci, Sv_new_ci)
wbat.ctd$wbat_site <- "ISECOLD_1_2000"
wbat.ctd$ctd_site <- "1901_069"
wbat.ctd$Frequency <- "38 kHz"

write.csv(wbat.ctd, "ISECOLD_1_2000_wbat_ctd69_38khz.csv")
wbat.ctd <- read.csv("ISECOLD_1_2000_wbat_ctd69_38khz.csv")

## Plotting the corrected mean Sv value as a profile ##

Sv_label <- expression(paste("Mean S"["v"]," [dB re 1 m" ^-1,"]"))

# comparison plot -- this plot shows both the original and the adjusted mean Sv value for the profile
sv.plot <-  ggplot(wbat.ctd, aes(x=pressure, y=Estimate_new)) + 
              geom_line(colour="blue", size=0.5) +  geom_ribbon(aes(ymin=lowCI_new, ymax=highCI_new), linetype=1, alpha=0.2, fill="blue") + 
              geom_line(aes(x=pressure, y=Estimate_old), inherit.aes = F, colour="red") + 
              geom_ribbon(aes(ymin=lowCI_old, ymax=highCI_old), linetype=1, alpha=0.2, fill="red", inherit.aes = T) +
              coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y=Sv_label) +
              # xlim(510, 490) + ylim(-90,-85) +
              theme_bw()

# Corrected Sv profile
sv.plot <-  ggplot(wbat.ctd, aes(x=pressure, y=Estimate_new)) + 
          geom_line(colour="black", size=0.5) +  geom_ribbon(aes(ymin=lowCI_new, ymax=highCI_new), linetype=1, alpha=0.2, fill="blue") + 
          coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y=Sv_label) +
          theme_bw()

## Plotting a depth-referenced echogram from acoustic probe ##
require(imager)
echogram <- as.cimg(Sv_new)  # converts Sv matrix into an image file
map.shift <- function(x,y) list(x=wbat.ctd$pressure,y=y)  
echo.shift <- imwarp(echogram,map=map.shift, direction="forward", coordinates = "absolute", boundary="dirichlet", interpolation = "nearest") 
echo.shift[echo.shift > -10] <- NA
echo.small <- as.data.frame(resize(echo.shift,round(width(echo.shift)/5),round(height(echo.shift)/5),  # reduces the Sv matrix to roughly 4% size for easy plotting
                                   interpolation_type = 2)) # interpolates using a moving average interpolation

d_scale <- seq(0, max(wbat.ctd$pressure), 200) # set depth scale for plotting

echoplot <- ggplot(echo.small, aes(x*5, y/4)) +  
              geom_raster(aes(fill=value)) +
              scale_fill_gradientn(colours=ocean.haline(100), guide = "colourbar", name="MVBS")  + 
              coord_flip() + scale_x_reverse(breaks=d_scale) + 
              xlim(1500,0) + ylim(5,190) +
              labs(x="Pressure [dBar]", y= "Range [m]") +
              theme(legend.position="left") +
              theme_bw()

## Building custom CTD plots

T.plot <- ggplot(wbat.ctd, aes(x=pressure, y=temperature)) + geom_line(colour="blue") +
                   coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="Temperature [C]") +
                    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank())

S.plot <- ggplot(wbat.ctd, aes(x=pressure, y=salinity)) + geom_line(colour="red") +
                  coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="Salinity [psu]") +
                    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank())

F.plot <- ggplot(wbat.ctd, aes(x=pressure, y=fluorometer)) + geom_line(colour="green") +
                  coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="Flourescence [mg/m**3]") +
                    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank())

SP.plot <- ggplot(wbat.ctd, aes(x=pressure, y=SPAR)) + geom_line(colour="orange") +
                  coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="SPAR [µeinsteins/s/m^2]") +
                    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank())

O.plot <- ggplot(wbat.ctd, aes(x=pressure, y=OXYM)) + geom_line(colour="purple") +
                coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="Oxygen [µM]") +
                    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank())

Ham.plot <- ggplot(wbat.ctd, aes(x=pressure, y=Ham)) + geom_line(colour="purple") +
                coord_flip()+ scale_x_reverse(breaks=d_scale) + labs(x= "Pressure [dBar]", y="HAM") +
                    theme_bw()# + theme(axis.title.y=element_blank(), axis.text.y=element_blank())
                
plot_grid(echoplot, sv.plot, T.plot, S.plot, Ham.plot,  nrow=1, ncol=5,rel_widths = c(2, 1, 1, 1, 1))

